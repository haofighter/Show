package com.myself.show.show.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.myself.show.show.net.responceBean.NoteDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_DATE".
*/
public class NoteDateDao extends AbstractDao<NoteDate, Long> {

    public static final String TABLENAME = "NOTE_DATE";

    /**
     * Properties of entity NoteDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property NoteHtml = new Property(2, String.class, "noteHtml", false, "NOTE_HTML");
        public final static Property NoteId = new Property(3, int.class, "noteId", false, "NOTE_ID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property SaveTime = new Property(5, long.class, "saveTime", false, "SAVE_TIME");
    }


    public NoteDateDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_DATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"NOTE_HTML\" TEXT," + // 2: noteHtml
                "\"NOTE_ID\" INTEGER NOT NULL ," + // 3: noteId
                "\"TITLE\" TEXT," + // 4: title
                "\"SAVE_TIME\" INTEGER NOT NULL );"); // 5: saveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_DATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteDate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String noteHtml = entity.getNoteHtml();
        if (noteHtml != null) {
            stmt.bindString(3, noteHtml);
        }
        stmt.bindLong(4, entity.getNoteId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getSaveTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteDate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String noteHtml = entity.getNoteHtml();
        if (noteHtml != null) {
            stmt.bindString(3, noteHtml);
        }
        stmt.bindLong(4, entity.getNoteId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getSaveTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoteDate readEntity(Cursor cursor, int offset) {
        NoteDate entity = new NoteDate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noteHtml
            cursor.getInt(offset + 3), // noteId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.getLong(offset + 5) // saveTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteDate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setNoteHtml(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoteId(cursor.getInt(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSaveTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoteDate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoteDate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteDate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
